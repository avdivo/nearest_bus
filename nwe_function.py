"""
Функция нахождения маршрутов (объекты остановок отправления,
остановок прибытия, списки автобусов для каждой остановки прибытия).

Ввод:
- название остановки отправления
- название остановки прибытия

Вывод:
{
    остановка отправления 1 (объект): {
        остановка назначения 1 (объект): [список автобусов (объекты)],
        остановка назначения 2 (объект): [список автобусов (объекты)],
        ...
    },
    остановка отправления 2 (объект): {
        остановка назначения 1 (объект): [список автобусов (объекты)],
        остановка назначения 2 (объект): [список автобусов (объекты)],
        ...
    },
}

Алгоритм:
Остановки отправления и прибытия просчитываются вместе с группами,
куда они входят. Поэтому и тех и других может быть несколько.

1. Получаем список групп названий остановок из таблицы StopGroup,
   каждая группа это список названий остановок группы (итого получить список списков)
2. Создаем список start_list объектов остановок отправления. В него включаем все остановки
   из групп, в которой есть ее название и все остановок с таким названием (они должны быть первыми).
3. Создаем список finish_list объектов остановок прибытия, так-же как start_list
   в п.2.
4. Создаем контрольный сет check_router автобусов, для проверки
   и исключения уже имеющихся. Проверка не допустит попадания одного автобуса
   с разных остановок в группе.
5. Создаем основной словарь result, куда будем добавлять все остановки отправления
   с их содержимым.
6. Запускаем цикл по всем остановкам отправления for start in start_list.
   Названные пользователем остановки идут первыми, поэтому если будут повторяющиеся
   автобусы, они будут записаны только в эти остановки.
7. Создаем словарь all_finish, куда будем помещать остановки прибытия с их содержимым.
8. Запускаем цикл по всем остановкам прибытия for finish in finish_list
9. Создаем список buses_list, для записи автобусов прибывающих на текущую остановку.
10. Находим в таблице Order все автобусы (через Router), у которых в порядке
   следования остановок в маршруте, остановка start находится раньше
   остановки finish. Выбирая таким образом автобусы с нужным направлением.
11. Добавляем каждый найденный автобус в список buses_list и check_router.
   Если этот автобус отсутствовал до этого в check_router.
   Таким образом избегая повторений одного автобуса,
   если он проходит через разные остановки группы прибытия.
12. Добавляем список buses_list как значение ключа finish в all_finish,
   если список не пустой.
13. Завершение цикла finish_list. Переход к п.9.
14. Добавляем словарь all_finish как значение ключа start в result.
   Если словарь не пустой.
15. Завершение цикла start_list. Переход к п.7.
16. Возвращаем готовый словарь result.
"""