  Алгоритм

   1. Импортировать необходимые компоненты:
       * datetime, Dict, List для аннотаций типов.
       * Модели BusStop, Bus, Schedule.
       * Функцию compare_name из utils.sorted_buses и cmp_to_key из functools для правильной сортировки номеров автобусов.

   2. Определить функцию:
       * Создать функцию full_schedule с аннотацией типов для аргумента (bus_stop: BusStop) и возвращаемого значения (-> Dict[Bus,
         List[datetime.time]]).
       * Добавить подробный docstring, описывающий назначение функции, ее параметры и то, что она возвращает.

   3. Получить данные из БД:
       * Выполнить один запрос к базе данных для получения всех записей о расписании для указанной остановки (bus_stop).
       * Использовать select_related('bus'), чтобы сразу загрузить связанные объекты Bus и избежать дополнительных запросов в цикле
         (решение проблемы N+1).

   4. Сформировать словарь:
       * Инициализировать пустой словарь schedule_data для хранения расписания.
       * Пройтись в цикле по полученным из БД записям.
       * Для каждой записи добавлять время (schedule.time) в список, соответствующий ключу-объекту Bus (schedule.bus). Метод
         setdefault идеально подходит для этой задачи.

   5. Отсортировать временные метки:
       * После формирования словаря пройтись по всем спискам временных меток (значениям словаря) и отсортировать каждый из них в
         хронологическом порядке.

   6. Отсортировать автобусы:
       * Получить список всех автобусов (ключей словаря).
       * Отсортировать этот список, используя ранее созданную функцию compare_name, чтобы номера автобусов шли в естественном
         порядке (например, "2", "10", "10а").

   7. Создать и вернуть итоговый словарь:
       * Создать новый словарь, в который будут добавлены автобусы и их расписания в отсортированном порядке.
       * Вернуть этот финальный отсортированный словарь.

  Примечание по типам данных:
  Модель Schedule хранит время в поле TimeField, что в Python соответствует типу datetime.time, а не datetime.datetime. Функция
  вернет список именно datetime.time объектов для каждого автобуса.