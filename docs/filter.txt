Класс для накопления и фильтрации списка автобусов
schedule/services/filter.py

Создеется и работает только 1 объект в функции route_analysis
модуля schedule/services/timestamp.py.

Класс Filter инициализируется перед циклами в указанной функции и 
создает словарь для хранения объектов автобусов. Это не те объекты, 
которые создаются в моделях БД. Класс для этих объектов объявляется 
внутри этого и служит для объектов-накопителей.

После получения результатов работы метода BestRouter.find_all_distance_variants
в route_analysis (внутри циклов) создается словарь описывающий маршрут 
и вместе с результатами работы метода передается в метод Filter.pair_filter где:
- создается объект класса автобуса BusStorage, если его еще нет. Созданный 
  экземпляр помещается в словарь с ключом объектом автобуса.
- через метод BusStorage.save пробуем добавить полученный маршрут в 
  хранилище объекта автобуса-накопителя. В нем сохраняется до 2 маршрутов 
  (ограничений нет, но логика не предуспатривает больше, для каждого 
  автобуса, в текущем расписании, есть 1 или 2 части маршрута туда и назад. 
  Для каждой части можно записать 1 маршрут).
  Фильтрация при добавлении (УРОВЕНЬ 2 - см docs/select_route.txt):
  - если для текущей части (она передается из BestRouter.find_all_distance_variants)  
    еще не сохранен маршрут - он сохраняется
  - если уже есть маршрут, он может заменить имеющийся, если у него выше 
    приоритет или если приоритет такой же то меньше балл.
  - если маршрут не добавляется он игнорируется.

После добавления всех маршрутов (циклы в route_analysis уже отработали) 
нужно сформировать результирующий список с применением фильтрации 
(УРОВЕНЬ 3 - см docs/select_route.txt). 
Работа метода Filter.get_bus_list :
- в объекте каждого автобуса сохраняется высший приоритет из поступивших, 
  маршруты с этим приоритетом он хранит.
- добавляем в список только маршруты автобусов с высшим приоритетом 
  из имеющихся.
- возвращаем список. Это уже и есть отфильтрованный список.

