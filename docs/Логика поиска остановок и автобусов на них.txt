 1. Группировка остановок назначения (target_stops)
       * Сначала функция ищет, входит ли конечная остановка (two) в какую-либо группу остановок (StopGroup). Эти группы объединяют
         близкорасположенные остановки.
       * Если конечная остановка находится в группе, то в список потенциальных пунктов назначения (target_stops) добавляются все остановки из
         этой группы. Это позволяет найти автобусы, которые едут не точно до указанной остановки, а до соседней, что тоже может быть удобно.

   2. Поиск маршрутов для начальной остановки (routers_one)
       * Функция ищет в базе данных все маршруты (Router), которые проходят через начальную остановку (one).
       * Поиск идет по трем полям:
           * start__name=one: остановка является начальной в маршруте.
           * end__name=one: остановка является конечной в маршруте.
           * orders_for_router__bus_stop__name=one: остановка является промежуточной на маршруте.
       * Результат сохраняется в виде множества routers_one, чтобы избежать дубликатов.

   3. Поиск маршрутов для остановок назначения (routers_two)
       * Точно такой же поиск, как и в предыдущем шаге, выполняется для каждой остановки из списка target_stops (который включает в себя и
         исходную конечную остановку two, и все соседние из группы).
       * Результаты для всех остановок назначения объединяются в одно множество routers_two.

   4. Поиск общих маршрутов (common_routers)
       * Функция находит пересечение множеств routers_one и routers_two. В результате получается список common_routers, который содержит
         только те маршруты, которые проходят и через начальную остановку, и через одну из остановок назначения.

   5. Фильтрация по направлению движения
       * Это самый важный шаг. Функция перебирает каждый маршрут из common_routers.
       * Для каждого маршрута она определяет порядковые номера начальной (order_one) и конечной (order_two) остановок. Эти номера хранятся в
         модели Order.
       * Далее идет проверка: if order_one.order_number > order_two.order_number:. Если порядковый номер начальной остановки больше, чем у
         конечной, это означает, что автобус на этом маршруте движется в обратном направлении. Такие маршруты отбрасываются.

   6. Сбор результатов
       * Если направление правильное, функция собирает следующую информацию:
           * start: объект начальной остановки.
           * stop: объект конечной остановки. Приоритет отдается той остановке, которую пользователь указал изначально (two).
           * buses: в множество добавляется объект автобуса, который следует по данному маршруту.
           * stops_bus: в словарь добавляется информация о том, какие автобусы на какие остановки назначения едут.

   7. Обработка неоднозначного пункта назначения
       * Может случиться так, что прямой маршрут до изначально указанной остановки two не найден, но есть маршруты до соседних остановок из
         группы.
       * В этом случае, если stop остался не определен, функция выберет в качестве конечной остановки ту, до которой идет больше всего
         автобусов из найденных.

   8. Возвращаемое значение
       * В итоге функция возвращает словарь, который содержит:
           * 'start': объект начальной остановки.
           * 'finish': объект конечной остановки.
           * 'buses': множество объектов автобусов, идущих по маршруту.
           * 'stops': словарь, где ключ — это объект остановки назначения, а значение — множество автобусов, которые до нее едут.
