import logging
import hashlib
import colorlog
import re, os, json
from time import sleep, time
from functools import cmp_to_key
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

from .buses_list import buses
from utils.sorted_buses import sorted_buses, compare_name

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–æ–≤
log_colors = {
    'DEBUG': 'cyan',
    'INFO': 'green',
    'WARNING': 'yellow',
    'ERROR': 'red',
    'CRITICAL': 'bold_red',
}

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ü–≤–µ—Ç–∞–º–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
handler = colorlog.StreamHandler()
formatter = colorlog.ColoredFormatter(
    "%(log_color)s%(message)s",  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    log_colors=log_colors
)
handler.setFormatter(formatter)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–≤–µ—Ç–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
logger = logging.getLogger()
logger.setLevel(logging.INFO)
logger.handlers = [handler]  # –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è


# def final_station(string):
#     """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–∫–∏ –∫–æ–Ω–µ—á–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –∏ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.
#     –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (—á–µ—Ä–µ–∑ —Ç–∏—Ä–µ), —Å–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –æ—Ç–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏—Ä–µ.
#     –ö–∞–∂–¥—ã–π —Ä–∞–∑ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–∫–∏.
#     """
#     data_final = []
#     file_final = 'final.json'
#     if os.path.exists(file_final):
#         with open(file_final, "r") as file:
#             data_final = json.load(file)
#     data_direction = []
#     file_direction = 'direction.json'
#     if os.path.exists(file_direction):
#         with open(file_direction, "r") as file:
#             data_direction = json.load(file)
#
#     bs_list = []
#     dir_list = []
#     for s in string:
#         if not s:
#             continue
#         dir_list.append(s)
#         for bs in s.split(' - '):
#             out = bs.strip()
#             if out:
#                 bs_list.append(out)
#
#     data = set(data_final).union(set(bs_list))
#     with open(file_final, "w") as file:
#         json.dump(list(data), file, ensure_ascii=False, indent=4)
#     data = set(data_direction).union(set(dir_list))
#     with open(file_direction, "w") as file:
#         json.dump(list(data), file, ensure_ascii=False, indent=4)


def get_schedule(driver):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""

    table = WebDriverWait(driver, 10).until(
        EC.visibility_of_all_elements_located((By.XPATH, '//*[@id="schedule"]'))
    )
    hours, minits = 0, 0
    schedule = []

    # –ó–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–±–µ–ª–∞–º–∏
    # –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏. –ß–∞—Å—ã –∑–∞–ø–∏—Å–∞–Ω—ã —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º
    # –ü–æ—Å–ª–µ —á–∞—Å–æ–≤ –∏–¥—É—Ç –∑–Ω–∞—á–µ–Ω–∏—è –º–∏–Ω—É—Ç (–æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Å–∞)
    try:
        strings = table[0].text.split()  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Ü–∏—Ñ—Ä—ã –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º
    except:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É.")
        return {}

    for string in strings:
        number = re.findall(r'\d+', string)  # –ü–æ–ª—É—á–∞–µ–º –∏–∑ —Å—Ç—Ä–æ–∫–∏ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –æ–Ω–æ —Ç–∞–º –µ—Å—Ç—å
        if not number:  # –ï—Å–ª–∏ —á–∏—Å–ª–∞ –Ω–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue
        if ':' in string:
            hours = number[0]  # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏–µ - —Ç–æ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å–æ–≤
        else:
            # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ - —ç—Ç–æ –º–∏–Ω—É—Ç—ã
            schedule.append(f'{hours}:{number[0]}')  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
    return schedule


def get_days_and_time(driver):
    """–ü–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–∏ –¥–Ω–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å: {–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: [—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ],...} –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏."""
    box = None
    # sleep(0.1)
    while not box:
        # –î–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π
        box = driver.find_elements(By.XPATH, f'/html/body/div[2]/div/div[2]/div[4]/div/div[2]/div[2]/div[1]')
    days = box[0].find_elements(By.TAG_NAME, "button")  # –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–Ω–µ–π

    # –ù–∞–∂–∞—Ç—å –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É –ø–Ω, –≤—Ç...
    res = dict()
    for day in days:
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable(day))
        day_text = day.text
        if "disabled" not in day.get_attribute("class"):
            day.click()
            res[day_text] = get_schedule(driver)  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        else:
            res[day_text] = []
    return res


def get_direction_and_bus_stop(driver):
    """–ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è (–º–∞—Ä—à—Ä—É—Ç—ã) –∏ –°–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å: {
                            –º–∞—Ä—à—Ä—É—Ç (–∫–æ–Ω–µ—á–Ω—ã–µ —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ): {
                                –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ: {
                                    'id': –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä,
                                    'schedule': {—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º}
                                },
                                ...
                            },
                            ...
                        }
    """

    wait = WebDriverWait(driver, 10)
    result = {}
    for i in range(99):  # –ë–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ ‚Äî —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –ø–æ –≤—Å–µ–º —Å–µ–∫—Ü–∏—è–º, –ø–æ–∫–∞ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        try:
            # –ñ–¥–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫ —Å—Å—ã–ª–æ–∫
            container = wait.until(
                EC.presence_of_element_located((By.XPATH, "/html/body/div[2]/div/div[2]/div[4]/div")))
            headings = container.find_elements(By.TAG_NAME, "h4")
            list_groups = container.find_elements(By.CLASS_NAME, "list-group")

            heading = headings[i].text.strip()  # –ú–∞—Ä—à—Ä—É—Ç
            group = list_groups[i]
            # print(f"\nüî∏ –°–µ–∫—Ü–∏—è: {heading}")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ <a> –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π —Å–µ–∫—Ü–∏–∏
            links = group.find_elements(By.TAG_NAME, "a")
            result[heading] = {}

            for j in range(len(links)):
                # –ü–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å DOM –∏ –Ω–∞–π—Ç–∏ —Ç—É –∂–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ
                container = wait.until(
                    EC.presence_of_element_located((By.XPATH, "/html/body/div[2]/div/div[2]/div[4]/div")))
                group = container.find_elements(By.CLASS_NAME, "list-group")[i]
                links = group.find_elements(By.TAG_NAME, "a")
                h6 = links[j].find_element(By.TAG_NAME, "h6")
                name = h6.text.strip()
                result[heading][name] = {}

                # print(f"  üîπ –ü–µ—Ä–µ—Ö–æ–¥ –∫: {name}")
                links[j].click()
                bus_stop_id = driver.current_url.split('/')[-2]  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (id)
                get = get_days_and_time(driver)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
                result[heading][name]["id"] = bus_stop_id
                result[heading][name]["schedule"] = get
                driver.back()

        except IndexError:
            break  # –ö–æ–≥–¥–∞ —Å–µ–∫—Ü–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å

    return result

    # # –°–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫
    # string = 'ABCDEF'
    # for i, direction in enumerate(directions):
    #     # logger.info(f"–ú–∞—Ä—à—Ä—É—Ç {direction}")
    #     # –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ
    #     bus_stops = len(driver.find_elements(By.XPATH, f'//*[@id="trip{string[i]}"]/a[*]')) + 1
    #     bus_stop_i = 1
    #     # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ –∫–∞–∂–¥–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    #     out = dict()  # –ß–∞—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
    #     while bus_stops - bus_stop_i:
    #         repeat = False
    #         while not repeat:
    #             try:
    #                 bus_stop = driver.find_elements(By.XPATH, f'//*[@id="trip{string[i]}"]/a[{bus_stop_i}]')
    #                 bus_stop_name = bus_stop[0].text
    #
    #                 # –ü–µ—Ä–µ–º–æ—Ç–∫–∞ –∫ –Ω—É–∂–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
    #                 driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", bus_stop[0])
    #
    #                 # –û–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    #                 WebDriverWait(driver, 5).until(EC.element_to_be_clickable(bus_stop[0]))
    #                 bus_stop[0].click()
    #                 # sleep(0.2)
    #                 bus_stop_id = driver.current_url.split('/')[-2]  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (id)
    #                 get = get_days_and_time(driver)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
    #                 repeat = True
    #             except Exception as e:
    #                 logger.warning(f"–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä.")
    #                 repeat = False
    #
    #         bus_stop_i += 1
    #         out[bus_stop_name] = {'id': bus_stop_id, 'schedule': get}
    #
    #     res[direction] = out  # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    #
    # return res


def calculate_md5_from_dict(data: dict) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö—ç—à–∞ md5 –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
    json_str = json.dumps(data, sort_keys=True, separators=(',', ':'))
    return hashlib.md5(json_str.encode('utf-8')).hexdigest()


def save_bus(schedule: dict, number: str, hash_: str, folder: str = "import_schedule/buses") -> str:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –ø–æ —à–∞–±–ª–æ–Ω—É {number}_{hash}.json.
    –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º –∏ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º —Ö—ç—à–µ–º ‚Äî –≤—ã—Ö–æ–¥.
    –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω, –Ω–æ —Ö—ç—à –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è ‚Äî —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π.
    –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª.
    """
    prefix = f"{number}_"
    target_filename = f"{number}_{hash_}.json"

    for filename in os.listdir(folder):
        if filename.startswith(prefix) and filename.endswith(".json"):
            if filename == target_filename:
                # –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ö—ç—à–µ–º ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å."
            else:
                # –°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª ‚Äî –¥—Ä—É–≥–æ–π —Ö—ç—à. –£–¥–∞–ª–∏–º
                os.remove(os.path.join(folder, filename))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    filepath = os.path.join(folder, target_filename)
    with open(filepath, 'w', encoding='utf-8') as f:
        json.dump(schedule, f, ensure_ascii=False, indent=4)
    return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ."


def merge_json_files(folder: str = "import_schedule/buses", output_filename: str = "result.json"):
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ JSON-—Ñ–∞–π–ª—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å.
    –ö–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –≤–∏–¥–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞, —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–≥–æ –ø–æ –Ω–æ–º–µ—Ä–∞–º.
    """
    merged = {}
    buses_present = []  # –≠—Ç–∏ –∞–≤—Ç–æ–±—É—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
    print("–°–±–æ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∏–º–ø–æ—Ä—Ç–∞:")
    for filename in sorted(os.listdir(folder)):
        if filename.endswith(".json") and filename != output_filename:
            filepath = os.path.join(folder, filename)
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    data = json.load(f)

                if not isinstance(data, dict):
                    print(f"–§–∞–π–ª {filename} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º. –ò—Å–∫–ª—é—á–µ–Ω.")
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ñ–∞–π–ª—ã

                number = filename.split("_")[0]  # –ù–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞
                # –ò—Å–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–±—É—Å
                if number not in buses:
                    print(f"–∞–≤—Ç–æ–±—É—Å {number} –∏—Å–∫–ª—é—á–µ–Ω")
                    continue

                buses_present.append(number)  # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–±—É—Å –≤ —Å–ø–∏—Å–æ–∫
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å
                merged[str(next(iter(data)))] = next(iter(data.values()))

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {filename}: {e}")
                continue

    # –°–æ–æ–±—â–∞–µ–º, –¥–ª—è –∫–∞–∫–∏—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
    is_absent = list(set(buses) - set(buses_present))
    is_absent = sorted_buses(is_absent)  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∞–≤—Ç–æ–±—É—Å–æ–≤
    if is_absent:
        print(f"–î–ª—è –∞–≤—Ç–æ–±—É—Å–æ–≤: {', '.join(is_absent)}\n–Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.")

    # –£–ø–æ—Ä—è–¥–æ—á–∏–º –ø–æ –Ω–æ–º–µ—Ä—É (–µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ int, –∏–Ω–∞—á–µ –ø–æ —Å—Ç—Ä–æ–∫–µ)
    sorted_merged = {k: merged[k] for k in sorted(merged, key=cmp_to_key(compare_name))}

    with open(os.path.join(".", output_filename), 'w', encoding='utf-8') as f:
        json.dump(sorted_merged, f, ensure_ascii=False, indent=4)

    print("–§–∞–π–ª –∏–º–ø–æ—Ä—Ç–∞ —Å–æ–±—Ä–∞–Ω:")
