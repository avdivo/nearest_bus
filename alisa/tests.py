import os
import time
import shutil

from django.conf import settings
from django.test import TestCase
from alisa.services.analizer_2 import select_samples_by_phrase
from schedule.models import BusStop, OptionsForStopNames

class AnalizerTest(TestCase):
    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        db_path = settings.DATABASES["default"]["NAME"]
        test_db_path = db_path.replace(".sqlite3", "_test.sqlite3")
        shutil.copy(db_path, test_db_path)
        settings.DATABASES["default"]["NAME"] = test_db_path

    def setUp(self):
        # Повторяем логику получения данных из БД, как в реальном коде
        self.stops = BusStop.get_all_bus_stops_names()
        self.options = OptionsForStopNames.get_dict_options_name()

    def test_single_stop(self):
        """Тестирование нескольких фраз с subTest()."""
        test_cases = [
            # ("Найди автобус от социалистической", ["Социалистическая"]),
            # ("Как проехать от ДК", ["Дом культуры"]),
            # ("Где остановка одинадцатого", ["Социалистическая"]),

            # ("Как поехать на вокзал", ["Автовокзал"]),
            # ("вокзал льнозавод", ["вокзал", "льнозавод"]),
            # ("рынок зелёная раз два три четыре пять", ["Рынок", "Зелёная"]),
            # ("Как проехать из одинадцатого на сахарный", ["Социалистическая", "Сахарорафинадный комбинат"]),
            # ("рынок исполком", ["Рынок", "исполком"]),
            # ("дом культуры", ["Дом культуры", "Поликлиника"]),
            # ("как доехать дома культуры 11 до поликлиники", ["Дом культуры", "Поликлиника"]),
            # ("как доехать из одинадцатого до вокзала", ["Социалистическая", "вокзал"]),
            # ("как доехать в одинадцатый с вокзала", ["вокзал", "Социалистическая"]),
            # ("ДК одинадцатый", ["Дом культуры", "Социалистическая"]),
            # ("одинадцатый ДК", ["Социалистическая", "Дом культуры"]),
            # ("рынок зелёная", ["Рынок", "Зелёная"]),
            # ("зелёная рынок", ["Зелёная", "Рынок"]),
            # ("льнозавод рынок", ["Льнозавод", "Рынок"]),
            # ("рынок льнозавод", ["Рынок", "Льнозавод"]),
            # ("от исполкома на льнозавод", ["исполком", "Льнозавод"]),
            # ("от зелёной до кранового", ["Зелёная", "Крановый завод"]),
            # ("райисполком", ["райисполком"]),
            # ("возле библиотеки", ["Библиотека"]),
            # ("какие остановки есть в 12 городке", ["12 городок"]),
            # ("от социалистической 146 ехать к ДК", ["социалистическая 146", "ДK"]),
            # ("найди остановки возле памятника жукову", ["Памятник жукову"]),
            # ("где находится пляж, какие там есть остановки", ["Пляж"]),
            # ("Тутаринова 10 Ленина 34", ["Тутаринова 10", "Ленина 34"]),
            # ("от Надречной 15", ["Надречная 15"]),
            # ("как доехать с Пионерской 2 до Социалистической 146", ["Пионерская 2", "Социалистическая 146"]),
            # ("Зелёная дом 7, Поликлиника", ["Зелёная 7", "Поликлиника"]),
            # ("от строймаркета поликлиника", ["Строймаркет", "Поликлиника"]),
            # ("Школа №6 Дом культуры", ["Школа №6", "Дом культуры"]),
            # ("ленина дом номер 150", ["Ленина 150"]),
            # ("одинадцатый городок", ["Социалистическая городок"]),
            # ("из одинадцатого в городок", ["Социалистическая", "Городок"]),
            # ("Юбилейная 13 Ленина", ["Юбилейная 13", "Ленина"]),
            # ("алиса маршрут номер двести пятьдесят шесть улица ленина сто пятьдесят восемь на третьем автобусе дом культуры одиннадцать", ["Юбилейная 13", "Ленина"]),
            # ("восьмая школа дом сто сорок шесть квартира пятьдесят пять улица восемнадцать дом автобус двадцать пятый едет в третью школу", ["Школа № 8"]),
            # ("с домом культуры", ["Дом культуры"]),
            ("улица первого августа зеленхоз ", ["1 Августа", "Зеленхоз"]),

        ]

        for phrase, expected in test_cases:
            with self.subTest(phrase=phrase):
                result = select_samples_by_phrase(phrase, self.stops, self.options, threshold=50)
                self.assertEqual(result, expected)

