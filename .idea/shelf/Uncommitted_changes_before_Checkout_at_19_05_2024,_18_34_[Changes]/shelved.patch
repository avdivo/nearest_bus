Index: alisa/services/talk_to_alisa.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Модуль принимает запросы от сервиса Яндекс.Диалоги и возвращает ответы.\n# Реализует функции навыка Слуцкие автобусы.\n\nimport re\nimport json\nimport logging\nfrom difflib import SequenceMatcher\n\nfrom schedule.models import BusStop, OptionsForStopNames\n\nfrom alisa.services.functions import authorize\nfrom alisa.services.analizer import select_samples_by_phrase\nfrom tbot.services.executors import answer_for_alisa\n\n\n\n\ndef answer_to_alisa(request_body):\n    \"\"\"Функция получает все сообщения от Алисы. Определяет их статус и выполняет\n    действия в соответствии с ним.\n    Принимает тело запроса от Алисы.\"\"\"\n\n    def say_schedule(start, end, schedule):\n        \"\"\"Готовит ответ о расписании между двумя остановками.\n        Принимает начальную и конечную остановки.\n        Возвращает текст ответа.\"\"\"\n        user.set_parameters([start, end], 'stops')  # Запоминаем начальную и конечную остановки для повтора\n        limit = 2\n        text = f'Ближайшие автобусы по маршруту {start} - {end} в '\n        if len(schedule) > 1:\n            for time, buses in schedule.items():\n                if limit == 0:\n                    break\n                text += f'{time} - '\n                word = 'автобус номер' if len(buses) == 1 else 'автобусы номер'\n                text += f'{word} {\" ,\".join(buses)}. '\n                limit -= 1\n                user.set_parameters(time, 'time')  # Запоминаем последнее названное время\n        return text\n\n    user = authorize(request_body)\n    if not user:\n        return\n\n    # Составим список остановок без повторений, в алфавитном порядке\n    stops = BusStop.get_all_bus_stops_names()\n\n    # Получаем словарь вариантов названий остановок\n    options = OptionsForStopNames.get_dict_options_name()\n\n    # Добавляем команды\n    commands = ['Что ты умеешь', 'Помощь', 'Дальше', 'Спасибо', 'Повтори']\n    stops.extend(commands)\n    # Добавляем расширительный словарь команд\n    add_commands = {\n        'Что ты умеешь': ['Что ты умеешь', 'Расскажи о себе', 'Для чего ты', 'Как пользоваться', 'Не понимаю'],\n        'Помощь': ['помощь', 'помоги', 'Какие есть команды', 'help me'],\n        'Дальше': ['Дальше', 'Следующий', 'Next', 'Еще', 'Другой', 'Позже'],\n        'Спасибо': ['Спасибо', 'Благодарю', 'thank you', 'дзякуй', 'умница', 'молодец', 'хорошо', 'отлично'],\n        'Повтори': ['Повтори', 'Скажи еще раз']\n    }\n    options.update(add_commands)\n\n    # Получаем текст в чистом виде (цифры - словами)\n    words = request_body['request']['original_utterance']\n\n    # Анализ текста\n    out = select_samples_by_phrase(words, stops, options)\n\n    if not out:\n        return ('Извиняюсь, я вас не поняла. '\n                'Пожалуйста, повторите или уточните названия остановок.')\n\n    elif len(out) == 1:\n        # Это может быть команда или не понятый маршрут\n        if out[0] in commands:\n            if out[0] == 'Что ты умеешь':\n                return ('Я подскажу вам, какие автобусы в ближайшее время идут по названному маршруту в Слуцке.'\n                        'Вы говорите с какой остановки на какую вы хотите поехать, я называю ближайшие автобусы. '\n                        'Могу огласить весь список команд, для этого скажите \"Помощь\".')\n\n            elif out[0] == 'Помощь':\n                return ('Чтобы узнать расписание назовите маршрут (с какой остановки на какую ехать).'\n                        'Чтобы услышать следующий автобус в расписании скажите \"Дальше\".'\n                        'Если хотите знать для чего программа, скажите \"Что ты умеешь\".')\n\n            elif out[0] == 'Спасибо':\n                return ('Шаркнула ножкой!')\n\n            elif out[0] == 'Повтори':\n                stops = user.get_parameters('stops')\n                if stops:\n                    return say_schedule(stops[0], stops[1], user.get_parameters('schedule'))\n                else:\n                    return ('Пожалуйста, назовите маршрут, чтобы узнать расписание.')\n\n            elif out[0] == 'Дальше':\n                if user.get_parameters('schedule'):\n                    # Имеем словарь {время (str): [автобус1, автобус2]}, ищем в нем уже названное время\n                    # Переходим к следующему и называем его\n                    schedule = user.get_parameters('schedule')\n                    time = user.get_parameters('time')\n                    times = list(schedule.keys())\n                    index = times.index(time)\n                    index += 1\n                    if index > len(times)-1:\n                        index = 0\n                    time = times[index]\n                    buses = schedule[time]\n                    user.set_parameters(time, 'time')  # Запоминаем последнее названное время\n                    word = 'автобус номер' if len(buses) == 1 else 'автобусы номер'\n                    return f'в {time} - {word} {\" ,\".join(buses)}.'\n                else:\n                    return ('Пожалуйста, назовите маршрут, чтобы узнать расписание.')\n\n            else:\n                return ('Извиняюсь, я вас не поняла. '\n                        'Пожалуйста, повторите или уточните названия остановок.')\n\n        return (f'Извиняюсь, я расслышала только одну остановку: {out[0]}. '\n                f'Пожалуйста, повторите или уточните названия остановок.')\n\n    elif len(out) == 2:\n        try:\n            # Список автобусов на остановке\n            schedule = answer_for_alisa(out[0], out[1])\n        except:\n            # Если остановка не найдена, то выводим сообщение и завершаем действие\n            return (f'Между остановками {out[0]} и {out[1]} нет прямого автобуса. '\n                    f'Пожалуйста, выберите другой маршрут.')\n\n        user.set_parameters(schedule, 'schedule')  # Запоминаем расписание для команды \"Дальше\"\n\n        # Увеличение счетчика выдачи расписаний для пользователя.\n        user.schedule_count += 1\n        user.save()\n\n        return say_schedule(out[0], out[1], schedule)\n\n    else:\n        return (f'Я не смогла понять вашу команду, вот что я услышала {\", \".join(out)}. ')\n
===================================================================
diff --git a/alisa/services/talk_to_alisa.py b/alisa/services/talk_to_alisa.py
--- a/alisa/services/talk_to_alisa.py	
+++ b/alisa/services/talk_to_alisa.py	
@@ -8,13 +8,14 @@
 
 from schedule.models import BusStop, OptionsForStopNames
 
-from alisa.services.functions import authorize
+from alisa.services.functions import authorize, date_now
 from alisa.services.analizer import select_samples_by_phrase
 from tbot.services.executors import answer_for_alisa
 
 
 
 
+
 def answer_to_alisa(request_body):
     """Функция получает все сообщения от Алисы. Определяет их статус и выполняет
     действия в соответствии с ним.
@@ -26,12 +27,27 @@
         Возвращает текст ответа."""
         user.set_parameters([start, end], 'stops')  # Запоминаем начальную и конечную остановки для повтора
         limit = 2
-        text = f'Ближайшие автобусы по маршруту {start} - {end} в '
+        text = f'Ближайшие автобусы по маршруту {start} - {end} '
         if len(schedule) > 1:
             for time, buses in schedule.items():
                 if limit == 0:
                     break
-                text += f'{time} - '
+
+                # Учим Алису говорить "Через ... минут", если автобус ранее чем через час
+                # time_now = date_now().time()
+                # minutes = time - time_now
+                # if minutes < 60:
+                if False:
+                    if minutes == 0:
+                        text += 'сейчас - '
+                    else:
+                        units = minutes % 10
+                        word_minutes = 'минуту' if units == 1 else 'минуты' if 1 < units < 5 else 'минут'
+                        text += f'через {minutes} {word_minutes} - '
+                else:
+                    text += 'в '
+                    text += f'{time} - '
+
                 word = 'автобус номер' if len(buses) == 1 else 'автобусы номер'
                 text += f'{word} {" ,".join(buses)}. '
                 limit -= 1
@@ -129,7 +145,7 @@
             return (f'Между остановками {out[0]} и {out[1]} нет прямого автобуса. '
                     f'Пожалуйста, выберите другой маршрут.')
 
-        user.set_parameters(schedule, 'schedule')  # Запоминаем расписание для команды "Дальше"
+        # user.set_parameters(schedule, 'schedule')  # Запоминаем расписание для команды "Дальше"
 
         # Увеличение счетчика выдачи расписаний для пользователя.
         user.schedule_count += 1
